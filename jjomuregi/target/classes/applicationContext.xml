<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 어노테이션 인식을 위한 설정(설정 패키지 안에 있는 모든 어노테이션 인식) -->
	<context:component-scan base-package="com.web.rnb"></context:component-scan>
	
	<!-- DataSource -->
	<context:property-placeholder location="classpath:config/database.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	<!-- SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
	</bean>
	<!-- SqlSessionTemplate -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	<!-- aop어노테이션 인식을 위한 설정 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- 트랜잭션 설정정보를 위한 어노테이션을 사용할수있는 설정 transactionManager 라는 이름이면 생략가능 하다.-->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- Transaction Manager -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- txManager Advice TransactionInterceptor 빈이 등록된다. @Transaction을 사용하면 밑에와 그밑의 설정은 필요없다.-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/><!-- 조회기능을 읽기전용으로 설정하면 성능향상에 도움이 된다. -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/> <!-- propagation:트랜잭션전파규칙 required:트랜잭션필요/트랜잭션이 이미존재하면 그것을사용하고 아니면 새로생성 -->
		</tx:attributes>	     <!-- 전파규칙이 required는 생략가능 -->                  <!-- Exception타입의 예외가 발생하면 롤백한다. -->  
	</tx:advice>
	<!-- txManagerAdvice aop 트랜잭션을 설정할 클래스의 모든 메소드를 트랜잭션 대상으로 선택하는 것이 좋다.-->
	<aop:config>
		<aop:pointcut expression="execution(* com.web.rnb..*(..))" id="txPointCut"/> <!-- "bean(*Service)" 이런식으로 빈은 대상으로 포인트컷을 지정해도된다. -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
</beans>
<!--
 REQUIRED : 메서드를 수행하는데 트랜잭션이 필요하다는 것을 의미. 현재 진행중인 트랜잭션이 존재하면, 해당 트랜잭션을 사용하고 존재하지 않는다면 새로운 트랜잭션을 생성

MANDATORY : 메서드를 수행하는데 트랜잭션이 필요하다는 것을 의미. REQUIRED와 달리,진행중인 트랜잭션이 존재하지 않을 경우 예외를 발생

REQUIRES_NEW : 항상 새로운 트랜잭션을 시작. 기존 트랜잭션이 존재하면 기존 트랜잭션을 일시 중지하고 새로운 트랜잭션을 시작. 새로 시작된 트랜잭션이 종료된 뒤에 기존 트랜잭션이 계속됨

SUPPROTS : 메서드가 트랜잭션을 필요로 하지는 않지만, 기존 트랜잭션이 존재할 경우 트랜잭션을 사용한다는 것을 의미. 진행 중인 트랜잭션이 존재하지 않더라도 메서드는 정상적으로 동작

NOT_SUPPORTED : 메서드가 트랜잭션을 필요로 하지 않음을 의미. SUPPORTS와 달리 진행중인 트랜잭션이 존재할 경우 메서드가 실행되는 동안 트랜잭션을 일시 중지되며, 메서드 실행이 종료된 후에 트랜잭션을 계속 진행

NEVER : 메서드가 트랜잭션을 필요로 하지 않으며, 만약 진행중인 트랜잭션이 존재하면 예외발생

NESTED : 기존 트랜잭션이 존재하면, 기존 트랜잭션에 중첩된 트랜잭션에서 메서드를 실행, 기존 트랜잭션이 존재하지 않으면 REQUIRED와 동일하게 동작한다. 

이 기능은 JDBC 3.0 드라이버를 사용할 때에만 적용된다고 한다.-->